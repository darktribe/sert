/**
 * =====================================================
 * Vinsert Editor - „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÂá¶ÁêÜ
 * =====================================================
 */
import {
    editor,
    isUndoRedoOperation,
    setIsUndoRedoOperation,
    isComposing,
    justFinishedComposition,
    currentContent,
    setCurrentContent,
    isModified,
    setIsModified,
    redoStack
} from './globals.js';
import { saveToUndoStack } from './undo-redo.js';
import { updateLineNumbers, updateStatus } from './ui-updater.js';
import { syncScroll } from './ui-updater.js';

/**
 * Á©∫ÁôΩÊñáÂ≠óÂèØË¶ñÂåñ„Éû„Éº„Ç´„Éº„ÇíÂøÖË¶Å„Å´Âøú„Åò„Å¶Êõ¥Êñ∞
 */
async function updateWhitespaceMarkersIfNeeded() {
    try {
        const module = await import('./whitespace-visualizer.js');
        if (module && module.updateWhitespaceMarkers) {
            module.updateWhitespaceMarkers();
        }
    } catch (error) {
        // Á©∫ÁôΩÊñáÂ≠óÂèØË¶ñÂåñÊ©üËÉΩ„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºà„Ç®„É©„Éº„É≠„Ç∞„ÅØÂá∫„Åï„Å™„ÅÑÔºâ
    }
}

/**
 * „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊôÇ„ÅÆÂá¶ÁêÜ
 * „Ç¢„É≥„Éâ„Ç•Â±•Ê≠¥„ÅÆÁÆ°ÁêÜ„Å®ÁîªÈù¢Êõ¥Êñ∞„ÇíË°å„ÅÜ
 */
export function handleInput(e) {
    console.log('=== INPUT EVENT ===');
    console.log('Input type:', e.inputType);
    console.log('Current content before update:', JSON.stringify(currentContent));
    console.log('New editor content:', JSON.stringify(editor.value));
    
    // „Ç¢„É≥„Éâ„Ç•„Éª„É™„Éâ„Ç•Êìç‰Ωú‰∏≠„ÅØÂ±•Ê≠¥‰ΩúÊàê„Çí„Çπ„Ç≠„ÉÉ„Éó
    if (isUndoRedoOperation) {
        console.log('Skipping history - undo/redo operation');
        setIsUndoRedoOperation(false);
        updateLineNumbers();
        updateStatus();
        updateWhitespaceMarkersIfNeeded();
    
        // Á©∫ÁôΩÊñáÂ≠óÂèØË¶ñÂåñ„Éû„Éº„Ç´„Éº„ÇÇÊõ¥Êñ∞
        updateWhitespaceMarkersIfNeeded();
        return;
    }

    // IMEÂ§âÊèõ‰∏≠„ÅØÂ±•Ê≠¥‰ΩúÊàê„Çí„Çπ„Ç≠„ÉÉ„Éó
    if (isComposing) {
        console.log('Skipping history - IME composing');
        updateLineNumbers();
        updateStatus();
        updateWhitespaceMarkersIfNeeded();
        return;
    }

    // IMEÁ¢∫ÂÆöÁõ¥Âæå„ÅÆÂÖ•Âäõ„ÅØÂ±•Ê≠¥‰ΩúÊàê„Çí„Çπ„Ç≠„ÉÉ„Éó
    if (justFinishedComposition) {
        console.log('Skipping history - just finished IME composition');
        setCurrentContent(editor.value);
        updateLineNumbers();
        updateStatus();
        updateWhitespaceMarkersIfNeeded();
        return;
    }

    const newContent = editor.value;
    const cursorPosition = editor.selectionStart;
    
    console.log('Content comparison:', {
        oldLength: currentContent.length,
        newLength: newContent.length,
        changed: newContent !== currentContent
    });

    if (newContent !== currentContent) {
        if (!isModified) {
            setIsModified(true);
        }

        // „ÄêÈáçË¶Å„ÄëÂ§âÊõ¥Âæå„ÅÆÂÜÖÂÆπ„ÇíÂ±•Ê≠¥„Å´‰øùÂ≠òÔºàÁ©∫ÁôΩ„ÇÇÂê´„ÇÄÔºâ
        console.log('=== SAVING TO HISTORY ===');
        console.log('Saving new content to history:', JSON.stringify(newContent));
        console.log('Cursor position:', cursorPosition);
        
        saveToUndoStack(newContent, cursorPosition);
        setCurrentContent(newContent);
        
        // „É™„Éâ„Ç•„Çπ„Çø„ÉÉ„ÇØ„Çí„ÇØ„É™„Ç¢
        redoStack.length = 0;
        console.log('Redo stack cleared');
    } else {
        console.log('Content unchanged, not saving to history');
    }

    updateLineNumbers();
    updateStatus();
    // ÊúÄ‰∏ãÊÆµ„Åß„ÅÆÊîπË°å„ÉÅ„Çß„ÉÉ„ÇØ
    checkBottomLineNewline();
    console.log('=== END INPUT EVENT ===');
}

/**
 * ÊúÄ‰∏ãÊÆµ„Åß„ÅÆÊîπË°åÊôÇ„ÅÆËá™Âãï„Çπ„ÇØ„É≠„Éº„É´
 */
/**
 * ÊúÄ‰∏ãÊÆµ„Åß„ÅÆÊîπË°åÊôÇ„ÅÆËá™Âãï„Çπ„ÇØ„É≠„Éº„É´
 */
/**
 * ÊúÄ‰∏ãÊÆµ„Åß„ÅÆÊîπË°åÊôÇ„ÅÆËá™Âãï„Çπ„ÇØ„É≠„Éº„É´
 */
function checkBottomLineNewline() {
    try {
        const lines = editor.value.split('\n');
        const totalLines = lines.length;
        
        // ÂâçÂõû„ÅÆË°åÊï∞„Å®ÊØîËºÉÔºàÊîπË°å„ÅåÁô∫Áîü„Åó„Åü„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºâ
        if (!editor._lastLineCount) {
            editor._lastLineCount = totalLines;
            return;
        }
        
        const lineIncreased = totalLines > editor._lastLineCount;
        editor._lastLineCount = totalLines;
        
        if (lineIncreased) {
            // ÊîπË°åÂæå„Å´Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´Ë™øÊï¥
            requestAnimationFrame(() => {
                const cursorPos = editor.selectionStart;
                const textBeforeCursor = editor.value.substring(0, cursorPos);
                const currentLine = textBeforeCursor.split('\n').length;
                
                // ÁèæÂú®„ÅÆ„Ç´„Éº„ÇΩ„É´Ë°å„ÅÆ‰ΩçÁΩÆ„ÇíË®àÁÆó
                const computedStyle = getComputedStyle(editor);
                const lineHeight = parseFloat(computedStyle.lineHeight);
                const paddingTop = parseFloat(computedStyle.paddingTop);
                const statusBarHeight = 24;
                
                const cursorLineTop = paddingTop + (currentLine - 1) * lineHeight;
                const cursorLineBottom = cursorLineTop + lineHeight;
                
                // Ë°®Á§∫È†òÂüü„ÅÆ‰∏ãÁ´ØÔºà„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº„ÇíÈô§„ÅèÔºâ
                const visibleBottom = editor.scrollTop + editor.clientHeight - statusBarHeight - 10;
                
                // „Ç´„Éº„ÇΩ„É´Ë°å„Åå„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº„Å´„Åã„Åã„ÇãÂ†¥Âêà„ÅØ‰∏ä„Å´„Çπ„ÇØ„É≠„Éº„É´
                if (cursorLineBottom > visibleBottom) {
                    const newScrollTop = cursorLineBottom - editor.clientHeight + statusBarHeight + 20;
                    editor.scrollTop = Math.max(0, newScrollTop);
                    syncScroll();
                    console.log('üìú Auto-scrolled for new line visibility:', editor.scrollTop);
                }
            });
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Bottom line newline check failed:', error);
    }
}