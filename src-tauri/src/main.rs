// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

/*
 * =====================================================
 * Sert Editor - Rust„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ
 * PythonÊã°ÂºµÊ©üËÉΩÂØæÂøú„ÅÆ„Ç∑„É≥„Éó„É´„Å™„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø
 * =====================================================
 */

use pyo3::prelude::*;
use pyo3::types::PyDict;

// =====================================================
// PythonÁµ±ÂêàÊ©üËÉΩÔºàPyO3Ôºâ
// =====================================================

/**
 * PyO3„ÅÆÂü∫Êú¨„ÉÜ„Çπ„ÉàÈñ¢Êï∞
 * PythonÁí∞Â¢É„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åô„Çã„Åã„ÉÜ„Çπ„Éà„Åô„Çã
 */
#[tauri::command]
fn test_python() -> Result<String, String> {
    Python::with_gil(|py| {
        let result = py.eval_bound("2 + 2", None, None);
        match result {
            Ok(val) => Ok(format!("Python result: {}", val)),
            Err(e) => Err(format!("Python error: {}", e)),
        }
    })
}

/**
 * ‰ªªÊÑè„ÅÆPython„Ç≥„Éº„Éâ„ÇíÂÆüË°å
 * Ê©üËÉΩÊã°Âºµ„Åß‰ΩøÁî®„Åï„Çå„Çã‰∫àÂÆö
 */
#[tauri::command]
fn execute_python(code: String) -> Result<String, String> {
    Python::with_gil(|py| {
        let locals = PyDict::new_bound(py);
        match py.run_bound(&code, None, Some(&locals)) {
            Ok(_) => {
                // ÁµêÊûú„ÇíÂèñÂæó„Åô„ÇãÂ†¥ÂêàÔºà‰æãÔºöÊúÄÂæå„ÅÆÂ§âÊï∞„ÅÆÂÄ§Ôºâ
                match locals.get_item("result") {
                    Ok(Some(val)) => Ok(format!("{}", val)),
                    _ => Ok("Code executed successfully".to_string()),
                }
            },
            Err(e) => Err(format!("Python execution error: {}", e)),
        }
    })
}

/**
 * PythonÂºè„ÇíË©ï‰æ°„Åô„ÇãÈñ¢Êï∞
 * Ê©üËÉΩÊã°Âºµ„Åß‰ΩøÁî®„Åï„Çå„Çã‰∫àÂÆö
 */
#[tauri::command]
fn evaluate_python_expression(expression: String) -> Result<String, String> {
    Python::with_gil(|py| {
        match py.eval_bound(&expression, None, None) {
            Ok(val) => Ok(format!("{}", val)),
            Err(e) => Err(format!("Python evaluation error: {}", e)),
        }
    })
}

/**
 * Python„Éï„Ç°„Ç§„É´„ÇíÂÆüË°å„Åô„ÇãÈñ¢Êï∞
 * Ê©üËÉΩÊã°ÂºµË™≠„ÅøËæº„Åø„Åß‰ΩøÁî®„Åï„Çå„Çã‰∫àÂÆö
 */
#[tauri::command]
fn run_python_file(file_path: String) -> Result<String, String> {
    Python::with_gil(|py| {
        match std::fs::read_to_string(&file_path) {
            Ok(code) => {
                let locals = PyDict::new_bound(py);
                match py.run_bound(&code, None, Some(&locals)) {
                    Ok(_) => Ok("Python file executed successfully".to_string()),
                    Err(e) => Err(format!("Python file execution error: {}", e)),
                }
            },
            Err(e) => Err(format!("Failed to read Python file: {}", e)),
        }
    })
}

/**
 * Python„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíÂèñÂæó
 * „Éá„Éê„ÉÉ„Ç∞„ÉªÁí∞Â¢ÉÁ¢∫Ë™çÁî®
 */
#[tauri::command]
fn get_python_info() -> Result<String, String> {
    Python::with_gil(|py| {
        let code = "import sys\nresult = sys.version";
        let locals = PyDict::new_bound(py);
        match py.run_bound(code, None, Some(&locals)) {
            Ok(_) => {
                match locals.get_item("result") {
                    Ok(Some(version)) => Ok(format!("Python version: {}", version)),
                    _ => Err("Could not get version info".to_string()),
                }
            },
            Err(e) => Err(format!("Failed to get Python info: {}", e)),
        }
    })
}

// =====================================================
// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âà∂Âæ°
// =====================================================

/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÁµÇ‰∫Ü„Ç≥„Éû„É≥„Éâ
 * Âç≥Â∫ß„Å´Âº∑Âà∂ÁµÇ‰∫Ü„Åô„Çã
 */
#[tauri::command]
fn exit_app() {
    println!("üî• Exit app command called - immediate shutdown");
    std::process::exit(0);
}

// =====================================================
// „ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâÊìç‰ΩúÔºà„ÇØ„É≠„Çπ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøúÔºâ
// =====================================================

/**
 * „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„ÉÜ„Ç≠„Çπ„Éà„ÇíÊõ∏„ÅçËæº„ÇÄ
 * Windows/macOS/LinuxÂØæÂøú
 */
#[tauri::command]
fn write_clipboard(text: String) -> Result<(), String> {
    println!("üìã Writing to clipboard: {} characters", text.len());
    
    #[cfg(target_os = "windows")]
    {
        use std::process::Command;
        let mut child = Command::new("cmd")
            .args(["/C", "echo", &text, "|", "clip"])
            .spawn()
            .map_err(|e| format!("Failed to spawn clipboard command: {}", e))?;
        
        let status = child.wait()
            .map_err(|e| format!("Failed to wait for clipboard command: {}", e))?;
        
        if status.success() {
            println!("‚úÖ Clipboard write successful (Windows)");
            Ok(())
        } else {
            Err("Clipboard write failed (Windows)".to_string())
        }
    }
    
    #[cfg(target_os = "macos")]
    {
        use std::process::{Command, Stdio};
        use std::io::Write;
        
        let mut child = Command::new("pbcopy")
            .stdin(Stdio::piped())
            .spawn()
            .map_err(|e| format!("Failed to spawn pbcopy: {}", e))?;
        
        if let Some(stdin) = child.stdin.as_mut() {
            stdin.write_all(text.as_bytes())
                .map_err(|e| format!("Failed to write to pbcopy: {}", e))?;
        }
        
        let status = child.wait()
            .map_err(|e| format!("Failed to wait for pbcopy: {}", e))?;
        
        if status.success() {
            println!("‚úÖ Clipboard write successful (macOS)");
            Ok(())
        } else {
            Err("Clipboard write failed (macOS)".to_string())
        }
    }
    
    #[cfg(target_os = "linux")]
    {
        use std::process::{Command, Stdio};
        use std::io::Write;
        
        // xclip„ÇíË©¶Ë°å
        let mut child = Command::new("xclip")
            .args(["-selection", "clipboard"])
            .stdin(Stdio::piped())
            .spawn();
        
        if let Ok(mut child_proc) = child {
            if let Some(stdin) = child_proc.stdin.as_mut() {
                if stdin.write_all(text.as_bytes()).is_ok() {
                    if let Ok(status) = child_proc.wait() {
                        if status.success() {
                            println!("‚úÖ Clipboard write successful (Linux/xclip)");
                            return Ok(());
                        }
                    }
                }
            }
        }
        
        // xclip„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÄÅxsel„ÇíË©¶Ë°å
        let mut child = Command::new("xsel")
            .args(["-b", "-i"])
            .stdin(Stdio::piped())
            .spawn()
            .map_err(|e| format!("Failed to spawn xsel: {}", e))?;
        
        if let Some(stdin) = child.stdin.as_mut() {
            stdin.write_all(text.as_bytes())
                .map_err(|e| format!("Failed to write to xsel: {}", e))?;
        }
        
        let status = child.wait()
            .map_err(|e| format!("Failed to wait for xsel: {}", e))?;
        
        if status.success() {
            println!("‚úÖ Clipboard write successful (Linux/xsel)");
            Ok(())
        } else {
            Err("Clipboard write failed (Linux)".to_string())
        }
    }
    
    #[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "linux")))]
    {
        Err("Clipboard operation not supported on this platform".to_string())
    }
}

/**
 * „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Åã„Çâ„ÉÜ„Ç≠„Çπ„Éà„ÇíË™≠„ÅøËæº„ÇÄ
 * Windows/macOS/LinuxÂØæÂøú
 */
#[tauri::command]
fn read_clipboard() -> Result<String, String> {
    println!("üìã Reading from clipboard");
    
    #[cfg(target_os = "windows")]
    {
        use std::process::Command;
        let output = Command::new("powershell")
            .args(["-Command", "Get-Clipboard"])
            .output()
            .map_err(|e| format!("Failed to execute clipboard read command: {}", e))?;
        
        if output.status.success() {
            let text = String::from_utf8_lossy(&output.stdout).trim().to_string();
            println!("‚úÖ Clipboard read successful (Windows): {} characters", text.len());
            Ok(text)
        } else {
            Err("Clipboard read failed (Windows)".to_string())
        }
    }
    
    #[cfg(target_os = "macos")]
    {
        use std::process::Command;
        let output = Command::new("pbpaste")
            .output()
            .map_err(|e| format!("Failed to execute pbpaste: {}", e))?;
        
        if output.status.success() {
            let text = String::from_utf8_lossy(&output.stdout).to_string();
            println!("‚úÖ Clipboard read successful (macOS): {} characters", text.len());
            Ok(text)
        } else {
            Err("Clipboard read failed (macOS)".to_string())
        }
    }
    
    #[cfg(target_os = "linux")]
    {
        use std::process::Command;
        
        // xclip„ÇíË©¶Ë°å
        let output = Command::new("xclip")
            .args(["-selection", "clipboard", "-o"])
            .output();
        
        if let Ok(output) = output {
            if output.status.success() {
                let text = String::from_utf8_lossy(&output.stdout).to_string();
                println!("‚úÖ Clipboard read successful (Linux/xclip): {} characters", text.len());
                return Ok(text);
            }
        }
        
        // xclip„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÄÅxsel„ÇíË©¶Ë°å
        let output = Command::new("xsel")
            .args(["-b", "-o"])
            .output()
            .map_err(|e| format!("Failed to execute xsel: {}", e))?;
        
        if output.status.success() {
            let text = String::from_utf8_lossy(&output.stdout).to_string();
            println!("‚úÖ Clipboard read successful (Linux/xsel): {} characters", text.len());
            Ok(text)
        } else {
            Err("Clipboard read failed (Linux)".to_string())
        }
    }
    
    #[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "linux")))]
    {
        Err("Clipboard operation not supported on this platform".to_string())
    }
}

// =====================================================
// „Éï„Ç°„Ç§„É´Êìç‰ΩúÔºàË™≠„ÅøÊõ∏„Åç„ÅÆ„Åø„ÄÅ„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅØJavaScriptÂÅ¥„ÅßÂá¶ÁêÜÔºâ
// =====================================================

/**
 * „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ
 */
#[tauri::command]
async fn read_file(path: String) -> Result<String, String> {
    println!("üìñ Reading file: {}", path);
    
    match std::fs::read_to_string(&path) {
        Ok(content) => {
            println!("‚úÖ File read successfully: {} characters", content.len());
            Ok(content)
        },
        Err(e) => {
            let error_msg = format!("Failed to read file '{}': {}", path, e);
            println!("‚ùå {}", error_msg);
            Err(error_msg)
        }
    }
}

/**
 * „Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„ÇÄ
 */
#[tauri::command]
async fn write_file(path: String, content: String) -> Result<(), String> {
    println!("üíæ Writing file: {} ({} characters)", path, content.len());
    
    match std::fs::write(&path, &content) {
        Ok(_) => {
            println!("‚úÖ File written successfully: {}", path);
            Ok(())
        },
        Err(e) => {
            let error_msg = format!("Failed to write file '{}': {}", path, e);
            println!("‚ùå {}", error_msg);
            Err(error_msg)
        }
    }
}

// =====================================================
// „É°„Ç§„É≥Èñ¢Êï∞„Å®„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
// =====================================================

fn main() {
    // PyO3„ÅÆÂàùÊúüÂåñ
    pyo3::prepare_freethreaded_python();
    
    tauri::Builder::default()
        // „Éó„É©„Ç∞„Ç§„É≥„ÅÆÂàùÊúüÂåñ
        .plugin(tauri_plugin_fs::init())
        .plugin(tauri_plugin_dialog::init())
        .plugin(tauri_plugin_shell::init())
        
        // Tauri„Ç≥„Éû„É≥„Éâ„ÅÆÁôªÈå≤
        .invoke_handler(tauri::generate_handler![
            // PythonÈñ¢ÈÄ£
            test_python,
            execute_python,
            evaluate_python_expression,
            run_python_file,
            get_python_info,
            
            // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âà∂Âæ°
            exit_app,
            
            // „ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâÊìç‰Ωú
            write_clipboard,
            read_clipboard,
            
            // „Éï„Ç°„Ç§„É´Êìç‰Ωú
            read_file,
            write_file
        ])
        
        // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñÂá¶ÁêÜ
        .setup(|_app| {
            println!("üöÄ Sert Editor starting up...");
            
            // PyO3„ÅÆÂàùÊúüÂåñ„ÉÜ„Çπ„Éà
            println!("üêç Testing PyO3 integration...");
            match test_python() {
                Ok(result) => println!("‚úÖ PyO3 test successful: {}", result),
                Err(e) => println!("‚ùå PyO3 test failed: {}", e),
            }
            
            // PythonÁí∞Â¢ÉÊÉÖÂ†±„ÅÆË°®Á§∫
            match get_python_info() {
                Ok(info) => println!("‚úÖ {}", info),
                Err(e) => println!("‚ùå Python info error: {}", e),
            }
            
            println!("üìã Clipboard operations enabled");
            println!("üìÅ File operations enabled (JavaScript-based dialogs)");
            println!("üéØ Sert Editor ready!");
            
            Ok(())
        })
        
        // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂÆüË°å
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}