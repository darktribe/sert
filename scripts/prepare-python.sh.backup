#!/bin/bash
# scripts/prepare-python.sh
# Python.frameworkを準備するスクリプト（修正版）

set -e

PYTHON_VERSION="3.11"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
PYTHON_RUNTIME_DIR="$PROJECT_ROOT/src-tauri/python-runtime"

echo "🐍 Preparing Python runtime for Vinsert..."
echo "📁 Project root: $PROJECT_ROOT"
echo "📁 Python runtime dir: $PYTHON_RUNTIME_DIR"

# 既存のpython-runtimeディレクトリをクリア
if [ -d "$PYTHON_RUNTIME_DIR" ]; then
    echo "🗑️ Cleaning existing Python runtime..."
    rm -rf "$PYTHON_RUNTIME_DIR"
fi

# Python runtimeディレクトリを作成
mkdir -p "$PYTHON_RUNTIME_DIR"

# Python.frameworkの場所を探す
PYTHON_FRAMEWORK_PATHS=(
    "/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION"
    "/usr/local/Frameworks/Python.framework/Versions/$PYTHON_VERSION"
    "$(brew --prefix 2>/dev/null)/Frameworks/Python.framework/Versions/$PYTHON_VERSION"
    "$HOME/.pyenv/versions/$PYTHON_VERSION.*/Python.framework/Versions/$PYTHON_VERSION"
)

FOUND_PYTHON=""
for path in "${PYTHON_FRAMEWORK_PATHS[@]}"; do
    # ワイルドカードを展開
    for expanded_path in $path; do
        if [ -d "$expanded_path" ]; then
            FOUND_PYTHON="$expanded_path"
            echo "✅ Found Python.framework at: $FOUND_PYTHON"
            break 2
        fi
    done
done

if [ -z "$FOUND_PYTHON" ]; then
    echo "❌ Python.framework not found!"
    echo "Searching in these locations:"
    for path in "${PYTHON_FRAMEWORK_PATHS[@]}"; do
        echo "  - $path"
    done
    echo ""
    echo "Please install Python $PYTHON_VERSION using one of the following methods:"
    echo ""
    echo "1. Official Python installer:"
    echo "   Download from https://www.python.org/downloads/"
    echo ""
    echo "2. Homebrew:"
    echo "   brew install python@$PYTHON_VERSION"
    echo ""
    echo "3. pyenv:"
    echo "   pyenv install $PYTHON_VERSION.7"
    echo ""
    exit 1
fi

echo "📦 Copying Python.framework..."
echo "From: $FOUND_PYTHON"
echo "To: $PYTHON_RUNTIME_DIR/$PYTHON_VERSION"

# Python.frameworkの内容を正しい場所にコピー
# コピー先ディレクトリを明示的に作成してからコピー
TARGET_DIR="$PYTHON_RUNTIME_DIR/$PYTHON_VERSION"
mkdir -p "$TARGET_DIR"

# 詳細なコピー処理（権限エラーを回避）
echo "🔄 Copying directory contents..."
if ! cp -R "$FOUND_PYTHON/"* "$TARGET_DIR/" 2>/dev/null; then
    echo "⚠️ Standard copy failed, trying with sudo..."
    # sudoを使ってコピーを試行
    if ! sudo cp -R "$FOUND_PYTHON/"* "$TARGET_DIR/" 2>/dev/null; then
        echo "❌ Copy failed even with sudo. Trying alternative method..."
        
        # 別の方法：tar を使用
        echo "🔄 Using tar for copying..."
        (cd "$FOUND_PYTHON" && tar cf - .) | (cd "$TARGET_DIR" && tar xf -)
        
        if [ $? -ne 0 ]; then
            echo "❌ All copy methods failed"
            exit 1
        fi
    fi
    
    # コピーしたファイルの所有者を現在のユーザーに変更
    echo "🔧 Changing ownership..."
    sudo chown -R $(whoami):$(id -gn) "$TARGET_DIR" 2>/dev/null || true
fi

# コピーされたディレクトリの確認
if [ ! -d "$TARGET_DIR" ]; then
    echo "❌ Copy failed - target directory not found: $TARGET_DIR"
    exit 1
fi

# 基本ファイルの存在確認
BASIC_FILES=(
    "$TARGET_DIR/bin"
    "$TARGET_DIR/lib"
    "$TARGET_DIR/include"
)

echo "🔍 Verifying copied structure..."
for dir in "${BASIC_FILES[@]}"; do
    if [ -d "$dir" ]; then
        echo "✅ Found directory: $(basename "$dir")"
    else
        echo "⚠️ Missing directory: $(basename "$dir")"
    fi
done

# 詳細な構造確認
echo "📁 Python runtime structure:"
ls -la "$TARGET_DIR/" | head -10

echo "🗑️ Cleaning up unnecessary files to reduce size..."

# __pycache__ディレクトリを削除
find "$TARGET_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# .pycファイルを削除
find "$TARGET_DIR" -name "*.pyc" -delete 2>/dev/null || true

# テストディレクトリを削除
find "$TARGET_DIR" -name "test" -type d -exec rm -rf {} + 2>/dev/null || true
find "$TARGET_DIR" -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true

# 不要なモジュールを削除（サイズ削減）
MODULES_TO_REMOVE=(
    "tkinter"
    "turtle" 
    "idlelib"
    "lib2to3"
    "ensurepip"
)

PYTHON_LIB_DIR="$TARGET_DIR/lib/python$PYTHON_VERSION"
if [ -d "$PYTHON_LIB_DIR" ]; then
    for module in "${MODULES_TO_REMOVE[@]}"; do
        MODULE_PATH="$PYTHON_LIB_DIR/$module"
        if [ -d "$MODULE_PATH" ]; then
            echo "🗑️ Removing unnecessary module: $module"
            rm -rf "$MODULE_PATH"
        fi
    done
fi

# ドキュメントファイルを削除
find "$TARGET_DIR" -name "*.md" -delete 2>/dev/null || true
find "$TARGET_DIR" -name "*.rst" -delete 2>/dev/null || true
find "$TARGET_DIR" -name "*.txt" -delete 2>/dev/null || true

# 実行権限を確認・設定
PYTHON_EXECUTABLES=(
    "$TARGET_DIR/bin/python$PYTHON_VERSION"
    "$TARGET_DIR/bin/python3"
    "$TARGET_DIR/bin/python"
)

for exe in "${PYTHON_EXECUTABLES[@]}"; do
    if [ -f "$exe" ]; then
        chmod +x "$exe" 2>/dev/null || true
        echo "✅ Made executable: $(basename "$exe")"
    fi
done

# サイズを確認
TOTAL_SIZE=$(du -sh "$PYTHON_RUNTIME_DIR" | cut -f1)
echo "📊 Python runtime size: $TOTAL_SIZE"

# 重要なファイルの存在確認
echo "🔍 Checking for required files..."

# Python実行ファイルを探す
PYTHON_EXE=""
for exe in "${PYTHON_EXECUTABLES[@]}"; do
    if [ -f "$exe" ]; then
        PYTHON_EXE="$exe"
        echo "✅ Found Python executable: $PYTHON_EXE"
        break
    fi
done

if [ -z "$PYTHON_EXE" ]; then
    echo "❌ No Python executable found"
    echo "📁 Contents of bin directory:"
    ls -la "$TARGET_DIR/bin/" 2>/dev/null || echo "No bin directory found"
    exit 1
fi

# Python共有ライブラリを探す
DYLIB_PATTERNS=(
    "$TARGET_DIR/lib/libpython$PYTHON_VERSION.dylib"
    "$TARGET_DIR/lib/libpython$PYTHON_VERSION*.dylib"
    "$TARGET_DIR/lib/python$PYTHON_VERSION/config-*/libpython*.dylib"
    "$TARGET_DIR/Python"
)

FOUND_DYLIB=""
for pattern in "${DYLIB_PATTERNS[@]}"; do
    for file in $pattern; do
        if [ -f "$file" ]; then
            FOUND_DYLIB="$file"
            echo "✅ Found Python library: $FOUND_DYLIB"
            break 2
        fi
    done
done

if [ -z "$FOUND_DYLIB" ]; then
    echo "⚠️ Python dynamic library not found, but continuing..."
    echo "📁 Contents of lib directory:"
    ls -la "$TARGET_DIR/lib/" 2>/dev/null | head -5
fi

# Python標準ライブラリの確認
if [ -d "$TARGET_DIR/lib/python$PYTHON_VERSION" ]; then
    echo "✅ Found Python standard library: python$PYTHON_VERSION"
else
    echo "❌ Python standard library not found"
    exit 1
fi

# Python実行テスト
echo "�� Testing Python runtime..."
if "$PYTHON_EXE" -c "import sys; print(f'Python {sys.version} is working!')" 2>/dev/null; then
    echo "✅ Python runtime test passed"
else
    echo "⚠️ Python runtime test failed, but continuing..."
    echo "📋 Python executable info:"
    file "$PYTHON_EXE" 2>/dev/null || echo "Cannot determine file type"
fi

echo ""
echo "✅ Python runtime preparation completed!"
echo "📁 Runtime location: $PYTHON_RUNTIME_DIR"
echo "🐍 Python version: $PYTHON_VERSION"
echo "📊 Total size: $TOTAL_SIZE"
echo "🔧 Python executable: $PYTHON_EXE"
echo ""
echo "Next steps:"
echo "1. Run: npm run tauri:build-with-python"
echo "2. Or run: ./scripts/build-with-python.sh"
